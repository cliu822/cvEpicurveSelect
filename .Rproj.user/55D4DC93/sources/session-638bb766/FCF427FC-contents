
#' Generate multiple cross-validation block labelings over a time series
#' @param tot_ts Total number of time points (e.g., total weeks of data)
#' @param n_cv_schemes Number of replicate CV block labeling schemes to generate
#' @param block_length Number of years per block (default: 3)
#' @param freq Number of time points per year (e.g., 52 for weekly data)
#' @return A list of character vectors labeling time points with blocks
make_cv_schemes <- function(tot_ts, n_cv_schemes, block_length = 3, freq = 52) {
  years <- floor(tot_ts / freq)
  base_labels <- rep(LETTERS[1:(years / block_length)], each = freq * block_length)
  cv_schemes <- vector("list", n_cv_schemes)
  for (i in 1:n_cv_schemes) {
    block_labels <- rep(LETTERS[(years / block_length) + 1], tot_ts)
    start <- sample(1:freq, 1)
    if (start == 1) {
      block_labels <- base_labels
    } else {
      rm_end <- abs(length(start:tot_ts) - length(base_labels)) - 1
      block_labels[start:tot_ts] <- base_labels[-((length(base_labels) - rm_end):length(base_labels))]
    }
    cv_schemes[[i]] <- block_labels
  }
  return(cv_schemes)
}

#' Greedy selection of control municipalities to optimize out-of-sample R2
#' @param goal_vec Vector of weekly cases in the goal municipality
#' @param candidate_mat Matrix of weekly cases for all candidate municipalities
#' @param cv_schemes List of CV schemes (block labelings)
#' @param n_select Number of municipalities to select
#' @return List with selected municipality names and R2 per step
greedy_select_controls_rcpp <- function(goal_vec, candidate_mat, cv_schemes, n_select = 10) {
  selected_names <- c()
  r2_per_step <- c()
  for (i in 1:n_select) {
    candidate_names <- colnames(candidate_mat)
    remaining_names <- setdiff(candidate_names, selected_names)
    candidate_r2_scores <- c()
    for (cand in remaining_names) {
      current_set <- c(selected_names, cand)
      current_mat <- candidate_mat[, current_set, drop = FALSE]
      all_r2 <- c()
      for (scheme in cv_schemes) {
        res <- eval_candidates_rcpp(
          goal_vec = as.numeric(goal_vec),
          candidate_mat = as.matrix(current_mat),
          block_labels = scheme,
          unique_blocks = unique(scheme),
          previously_selected = (which(colnames(current_mat) %in% selected_names) - 1),
          candidate_names = colnames(current_mat)
        )
        all_r2 <- c(all_r2, res$R2[res$selected == cand])
      }
      avg_r2 <- mean(all_r2, na.rm = TRUE)
      candidate_r2_scores[cand] <- avg_r2
    }
    best_cand <- names(which.max(candidate_r2_scores))
    selected_names <- c(selected_names, best_cand)
    r2_per_step <- c(r2_per_step, candidate_r2_scores[best_cand])
    message(sprintf("Step %d: selected %s with avg R2 = %.3f", i, best_cand, candidate_r2_scores[best_cand]))
  }
  return(list(selected_controls = selected_names, r2_per_step = r2_per_step))
}
